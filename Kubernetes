Kubernetes is a container orchestration platform.
It will support's the HOst level, Auto healing, Auto scaling, & Enterprice level support compring with the docker.
By default kubernetes is a cluster (cluster is a group of nodes master & worker)

-----------*ARCHITECTURE OF KUBERNETES*-------------

DATA PLANE OR WORKER PLANE
  1. KUBELET : Which is responsibel for creation of the pods and it will basically ensure that the pod is always in the running state. If it is not running then it will take the necessary action by using the control plane
  2. KUBEPROXY : It uses IPtable for network related configurtions & load balancing
  3. CONTINER RUN TIME : It is responsible for running continer
CONTROL OR MATER PLANE
  1. API SERVER : Is a component that exposes the kubernets to external world and takes all the requests from exrernal
  2. SECHUDLER : It is responsible for secheduling the resources & pods on the kubernetes (receives information from API server)
  3. ETCD : The entier cluster information will stored as objects or key value pairs
  4. CONTROLLER MANAGER : 
  5. CLOUD CONTROLLER MANAGER : 

----------------------------*Commands*----------------------------------------
minikube start - to start k-cluster
kubectl get nodes - to check the node status
kubectl apply -f <file name> or cerate - to create pod or deployment
kubectl get pods - list of pods
kubectl get deploy - list of deployments
kubectl get all - list of all pods & deployments
kubectl get all -a - list of all name spaces in the cluster
kubectl delete pod <name> - to delete the pod
kubectl logs <name> - to verify the logs of pods
kubectl get pods -w - watch the pods
curl <ip address> 
kubectl describe <name> - all info about pods



-------------------------------------------------------------------------------
POD : A pod can be a single or multiple containers, pod is similar to the continer
 basic pod yaml file 
by defaul the pod does not having the auto healing & sclaing feature
---------------- pod.yml -------------
  apiVersion: v1
kind: Pod
metadata:
    name: nginx
spec:
    containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
         - containerPort: 80
---------------------------------------------

          KUBERNETES DEPLOYMENT
DEPLOY: by useing this will create a replicaset
*REPLICASET : IS nothing but a kubernetes controller which helps to auto healing feature of pod if a pod getting killed, If deployment says that will increases the pod

Create a yaml file for deploy 
 ------------------deploy.yml-------------
apiVersion: apps/v1
kind: Deployment
metadata:
    name: nginx-deployment
    labels:
      app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:1.14.2
          ports:
            - containerPort: 80
--------------------------------------------------------------------


   
